From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 7 Jul 2020 10:52:34 -0700
Subject: [PATCH] More-World-API


diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index b1968103165475dd4021570e3a24deb3dc3ac796..1dcd18e9915bc1cf571959b934b3194f4b0a9064 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1744,6 +1744,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         return !this.worldDataServer.getGeneratorSettings().shouldGenerateMapFeatures() ? null : this.getChunkProvider().getChunkGenerator().findNearestMapFeature(this, structuregenerator, blockposition, i, flag); // CraftBukkit
     }
 
+    public BlockPosition getNearestBiome(BiomeBase biomeBase, BlockPosition blockPosition, int radius, int step) { return this.a(biomeBase, blockPosition, radius, step); } // Paper - OBFHELPER
     @Nullable
     public BlockPosition a(BiomeBase biomebase, BlockPosition blockposition, int i, int j) {
         return this.getChunkProvider().getChunkGenerator().getWorldChunkManager().a(blockposition.getX(), blockposition.getY(), blockposition.getZ(), i, j, (biomebase1) -> {
@@ -1766,6 +1767,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         return this.savingDisabled;
     }
 
+    public IRegistryCustom getWorldCustomRegistry() { return r(); } // Paper - OBFHELPER
     @Override
     public IRegistryCustom r() {
         return this.server.getCustomRegistry();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 299f57ca2a65887a0d7e7c584fc1bd5c783b0db2..e50044c3d7fb9fd9b8b79b87dcffe7666f5aa1d0 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -22,6 +22,8 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.ArraySetSorted;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.BiomeBase;
@@ -2488,6 +2490,87 @@ public class CraftWorld implements World {
         return (nearest == null) ? null : new Location(this, nearest.getX(), nearest.getY(), nearest.getZ());
     }
 
+    // Paper start
+    @Override
+    public Location locateNearestBiome(Location origin, Biome biome, int radius) {
+        return this.locateNearestBiome(origin, biome, radius, 8);
+    }
+
+    @Override
+    public Location locateNearestBiome(Location origin, Biome biome, int radius, int step) {
+        BlockPosition originPos = new BlockPosition(origin.getX(), origin.getY(), origin.getZ());
+        BlockPosition nearest = getHandle().getNearestBiome(CraftBlock.biomeToBiomeBase(getHandle().getWorldCustomRegistry().b(IRegistry.ay), biome), originPos, radius, step);
+        return (nearest == null) ? null : new Location(this, nearest.getX(), nearest.getY(), nearest.getZ());
+    }
+
+    @Override
+    public boolean isUltrawarm() {
+        return getHandle().getDimensionManager().isNether();
+    }
+
+    @Override
+    public boolean isNatural() {
+        return getHandle().getDimensionManager().isNatural();
+    }
+
+    @Override
+    public double getCoordinateScale() {
+        return getHandle().getDimensionManager().getCoordinateScale();
+    }
+
+    @Override
+    public boolean hasSkylight() {
+        return getHandle().getDimensionManager().hasSkyLight();
+    }
+
+    @Override
+    public boolean hasBedrockCeiling() {
+        return getHandle().getDimensionManager().hasSkyLight();
+    }
+
+    @Override
+    public boolean isPiglinSafe() {
+        return getHandle().getDimensionManager().isPiglinSafe();
+    }
+
+    @Override
+    public boolean doesBedWork() {
+        return getHandle().getDimensionManager().isBedWorks();
+    }
+
+    @Override
+    public boolean doesRespawnAnchorWork() {
+        return getHandle().getDimensionManager().isRespawnAnchorWorks();
+    }
+
+    @Override
+    public boolean hasRaids() {
+        return getHandle().getDimensionManager().hasRaids();
+    }
+
+    @Override
+    public boolean isFixedTime() {
+        return getHandle().getDimensionManager().isFixedTime();
+    }
+
+    @Override
+    public Collection<org.bukkit.Material> getInfiniburn() {
+        return com.google.common.collect.Sets.newHashSet(com.google.common.collect.Iterators.transform(getHandle().getDimensionManager().o().getTagged().iterator(), CraftMagicNumbers::getMaterial));
+    }
+
+    @Override
+    public void broadcastMessage(BaseComponent[] message) {
+        getPlayers().forEach(Player::sendMessage);
+    }
+
+    @Override
+    public void broadcastMessage(BaseComponent[] message, String permission) {
+        getPlayers().forEach(player -> {
+            if (player.hasPermission(permission)) player.sendMessage(message);
+        });
+    }
+    // Paper end
+
     @Override
     public Raid locateNearestRaid(Location location, int radius) {
         Validate.notNull(location, "Location cannot be null");
