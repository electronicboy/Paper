From ac67a3574bd08f336659d91087cc84dada6cf83c Mon Sep 17 00:00:00 2001
From: Shane Freeder <theboyetronic@gmail.com>
Date: Sat, 16 Jun 2018 05:26:41 +0100
Subject: [PATCH] Replace NextTickList implementation

Using a TreeMap for sorting the tick list causes issues due to how
it uses the comparator internally which causes many issues around
updating entries in the map.

This patch is an attempt to rectify the issue.

diff --git a/src/main/java/com/destroystokyo/paper/util/NextTickList.java b/src/main/java/com/destroystokyo/paper/util/NextTickList.java
new file mode 100644
index 0000000000..f35c2e3bd6
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/util/NextTickList.java
@@ -0,0 +1,69 @@
+package com.destroystokyo.paper.util;
+
+import java.util.Iterator;
+import java.util.PriorityQueue;
+
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+
+public class NextTickList<T> {
+
+    private ObjectOpenHashSet<T> set = new ObjectOpenHashSet<>();
+    private PriorityQueue<T> queue = new PriorityQueue<>();
+
+
+    public boolean contains(T entry) {
+        return set.contains(entry);
+    }
+
+    public boolean add(T entry) {
+        set.add(entry);
+        return queue.add(entry);
+    }
+
+
+    public int size() {
+        return set.size();
+    }
+
+    public T first() {
+        return queue.peek();
+    }
+
+    public T pop() {
+        T entry = queue.poll();
+        set.remove(entry);
+        return entry;
+    }
+
+    public boolean isEmpty() {
+        return set.size() == 0;
+    }
+
+    public Iterator<T> iterator() {
+        return new Iterator<T>() {
+
+            private Iterator<T> it = queue.iterator();
+            private T last;
+
+            @Override
+            public boolean hasNext() {
+                return it.hasNext();
+            }
+
+            @Override
+            public T next() {
+                return last = it.next();
+            }
+
+            @Override
+            public void remove() {
+                if (last == null) {
+                    throw new IllegalStateException();
+                }
+                it.remove();
+                queue.remove(last);
+                last = null;
+            }
+        };
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index b19942e0f1..29f8490ae2 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -41,7 +41,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     public EntityTracker tracker;
     private final PlayerChunkMap manager;
     // private final Set<NextTickListEntry> nextTickListHash = Sets.newHashSet();
-    private final HashTreeSet<NextTickListEntry> nextTickList = new HashTreeSet<NextTickListEntry>(); // CraftBukkit - HashTreeSet
+    private final com.destroystokyo.paper.util.NextTickList<NextTickListEntry> nextTickList = new com.destroystokyo.paper.util.NextTickList<NextTickListEntry>(); // CraftBukkit - HashTreeSet // Paper - NextTickList
     public final Map<UUID, Entity> entitiesByUUID = Maps.newHashMap(); // Paper
     public boolean savingDisabled;
     private boolean Q;
@@ -767,9 +767,9 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
 
                     // CraftBukkit - use nextTickList
-                    this.nextTickList.remove(nextticklistentry);
+                    // this.nextTickList.remove(nextticklistentry); // Paper - NextTickList
                     // this.nextTickListHash.remove(nextticklistentry);
-                    this.W.add(nextticklistentry);
+                    this.W.add(this.nextTickList.pop()); // Paper - NextTickList
                 }
                 timings.scheduledBlocksCleanup.stopTiming(); // Paper
 
-- 
2.18.0

