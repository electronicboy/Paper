From 5ec37b98fadc315168d4652fe163a5947e85cfe3 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 1 May 2018 21:33:35 -0400
Subject: [PATCH] Close Plugin Class Loaders on Disable

This should close more memory leaks from /reload and disabling plugins,
by closing the class loader and the jar file.

We should only close the classloader during reload, disable should not
close the classloader of the plugin other than during a reload or when
a plugin fails to load.

This behavior is also exposed by the API, allowing for plugins to disable
other plugins and control if their classloader should also be closed.

diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index e7981a1d..7c317048 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -73,4 +73,16 @@ public interface PluginLoader {
      * @param plugin Plugin to disable
      */
     public void disablePlugin(Plugin plugin);
+
+    // Paper start - close Class Loader on disable - add to API
+    /**
+     * Disables the specified plugin
+     * <p>
+     * Attempting to disable a plugin that is not enabled will have no effect
+     *
+     * @param plugin Plugin to disable
+     * @param closeClassloader Should the classloader be closed
+     */
+    public void disablePlugin(Plugin plugin, boolean closeClassloader);
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index e5638d56..d2ea6f63 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -154,6 +154,18 @@ public interface PluginManager {
      */
     public void disablePlugin(Plugin plugin);
 
+    // Paper start - close Class Loader on disable - add to API
+    /**
+     * Disables the specified plugin
+     * <p>
+     * Attempting to disable a plugin that is not enabled will have no effect
+     *
+     * @param plugin Plugin to disable
+     * @param closeClassloader Should the classloader be closed
+     */
+    public void disablePlugin(Plugin plugin, boolean closeClassloader);
+    // Paper end
+
     /**
      * Gets a {@link Permission} from its fully qualified name
      *
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index bd0588a2..f469bcad 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -415,14 +415,20 @@ public final class SimplePluginManager implements PluginManager {
     public void disablePlugins() {
         Plugin[] plugins = getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
-            disablePlugin(plugins[i]);
+            disablePlugin(plugins[i], true); // Paper - close Class Loader on disable
         }
     }
 
+    // Paper start - close Class Loader on disable
     public void disablePlugin(final Plugin plugin) {
+        disablePlugin(plugin, false);
+    }
+
+    public void disablePlugin(final Plugin plugin, boolean closeClassloader) {
+        // Paper end
         if (plugin.isEnabled()) {
             try {
-                plugin.getPluginLoader().disablePlugin(plugin);
+                plugin.getPluginLoader().disablePlugin(plugin, closeClassloader); // Paper - close Class Loader on disable
             } catch (Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while disabling "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 40fd71dc..c2e129a9 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -317,7 +317,7 @@ public final class JavaPluginLoader implements PluginLoader {
             } catch (Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
                 // Paper start - Disable plugins that fail to load
-                disablePlugin(jPlugin);
+                disablePlugin(jPlugin, true); // Paper start - close Class Loader on disable - She failed jim, might as well close and release the handle
                 return;
                 // Paper end
             }
@@ -328,7 +328,13 @@ public final class JavaPluginLoader implements PluginLoader {
         }
     }
 
+    // Paper start - close Class Loader on disable - add boolean
     public void disablePlugin(Plugin plugin) {
+        disablePlugin(plugin, false);
+    }
+
+    public void disablePlugin(Plugin plugin, boolean closeClassloader) {
+        // Paper end
         Validate.isTrue(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
 
         if (plugin.isEnabled()) {
@@ -355,6 +361,16 @@ public final class JavaPluginLoader implements PluginLoader {
                 for (String name : names) {
                     removeClass(name);
                 }
+                // Paper start - close Class Loader on disable
+                try {
+                    if (closeClassloader) {
+                        loader.close();
+                    }
+                } catch (IOException e) {
+                    server.getLogger().log(Level.WARNING, "Error closing the Plugin Class Loader for " + plugin.getDescription().getFullName());
+                    e.printStackTrace();
+                }
+                // Paper end
             }
         }
     }
-- 
2.17.1

